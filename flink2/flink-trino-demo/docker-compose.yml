services:
  web:
    image: "marquezproject/marquez-web:0.51.1"
    container_name: marquez-web
    environment:
      - MARQUEZ_HOST=marquez
      - MARQUEZ_PORT=9000
      - WEB_PORT=3000
      - REACT_APP_ADVANCED_SEARCH=true
    ports:
      - 3000:3000
    links:
      - "api:marquez"
    depends_on:
      - api

  api:
    image: marquezproject/marquez:0.51.1
    container_name: marquez-api
    environment:
      - MARQUEZ_PORT=9000
      - MARQUEZ_ADMIN_PORT=5001
      - POSTGRES_HOST=db
      - SEARCH_ENABLED=false
    ports:
      - "9000:9000"
      - "5001:5001"
    volumes:
      - ./docker/wait-for-it.sh:/usr/src/app/wait-for-it.sh
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/api/v1/namespaces" ]
      interval: 200s
      timeout: 200s
      retries: 5
    links:
      - "db:postgres"
    depends_on:
      - db
    entrypoint: [ "./wait-for-it.sh", "db:5432", "--", "./entrypoint.sh" ]

  db:
    image: postgres:13
    container_name: marquez-db
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "marquez" ]
      interval: 5s
      retries: 5
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      MARQUEZ_DB: marquez
      MARQUEZ_USER: marquez
      MARQUEZ_PASSWORD: marquez
    volumes:
      - ./docker/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh

  notebook:
    image: jupyter/base-notebook:latest
    ports:
      - "8888:8888"
    volumes:
      - ./docker/notebooks:/home/jovyan/notebooks
    links:
      - "api:marquez"
      - "trino:trino"
    depends_on:
      - api

  trino:
    image: trinodb/trino:latest
    container_name: trino
    ports:
      - "8080:8080"
    volumes:
      - ./docker/trino/openlineage-event-listener.properties:/etc/trino/openlineage-event-listener.properties
      - ./docker/trino/config.properties:/etc/trino/config.properties
    depends_on:
      - api

  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.1
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1

  kafka:
    image: wurstmeister/kafka:2.13-2.8.1
    container_name: kafka
    hostname: kafka
    ports:
      - 9092:19092
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT'
      KAFKA_LISTENERS: 'LISTENER_DOCKER_INTERNAL://kafka:9092,LISTENER_DOCKER_EXTERNAL://127.0.0.1:19092'
      KAFKA_ADVERTISED_LISTENERS: 'LISTENER_DOCKER_INTERNAL://kafka:9092,LISTENER_DOCKER_EXTERNAL://127.0.0.1:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'LISTENER_DOCKER_INTERNAL'
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_BROKER_ID: 1
      KAFKA_CREATE_TOPICS: 'input-topic:1:1;output-topic:1:1'
      KAFKA_LOG4J_LOGGERS: 'kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO'

  flink-taskmanager:
    image: apache/flink:scala_2.12-java17
    container_name: taskmanager
    volumes:
      - ./docker/jars/flink-connector-jdbc-architecture-4.0-SNAPSHOT.jar:/opt/flink/lib/flink-connector-jdbc-architecture-4.0-SNAPSHOT.jar
      - ./docker/jars/flink-connector-jdbc-core-4.0-SNAPSHOT.jar:/opt/flink/lib/flink-connector-jdbc-core-4.0-SNAPSHOT.jar
      - ./docker/jars/flink-connector-jdbc-trino-4.0-SNAPSHOT.jar:/opt/flink/lib/flink-connector-jdbc-trino-4.0-SNAPSHOT.jar
      - ./docker/jars/flink-connector-kafka-4.0.0-2.0.jar:/opt/flink/lib/flink-connector-kafka-4.0.0-2.0.jar
      - ./docker/jars/kafka-clients-4.0.0.jar:/opt/flink/lib/kafka-clients-4.0.0.jar
      - ./docker/jars/trino-jdbc-475.jar:/opt/flink/lib/trino-jdbc-475.jar
      - ./docker/jars/openlineage-flink-1.32.0.jar:/opt/flink/lib/openlineage-flink-1.32.0.jar
      - ./docker/openlineage.yml:/tmp/openlineage.yml
    hostname: taskmanager
    command: taskmanager
    scale: 1
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 4
    links:
      - "trino:trino"
    depends_on:
      - flink-jobmanager
    #entrypoint: [ './wait-for-it.sh', 'marquez-api:5000', '--', '/opt/flink/bin/taskmanager.sh', 'start-foreground', '-Djobmanager.rpc.address=jobmanager', '-Dtaskmanager.numberOfTaskSlots=2' ]


  flink-jobmanager:
    image: apache/flink:scala_2.12-java17
    hostname: jobmanager
    ports:
      - "8081:8081"
    volumes:
      - ./docker/jars/flink-connector-jdbc-architecture-4.0-SNAPSHOT.jar:/opt/flink/lib/flink-connector-jdbc-architecture-4.0-SNAPSHOT.jar
      - ./docker/jars/flink-connector-jdbc-core-4.0-SNAPSHOT.jar:/opt/flink/lib/flink-connector-jdbc-core-4.0-SNAPSHOT.jar
      - ./docker/jars/flink-connector-jdbc-trino-4.0-SNAPSHOT.jar:/opt/flink/lib/flink-connector-jdbc-trino-4.0-SNAPSHOT.jar
      - ./docker/jars/flink-connector-kafka-4.0.0-2.0.jar:/opt/flink/lib/flink-connector-kafka-4.0.0-2.0.jar
      - ./docker/jars/kafka-clients-4.0.0.jar:/opt/flink/lib/kafka-clients-4.0.0.jar
      - ./docker/jars/trino-jdbc-475.jar:/opt/flink/lib/trino-jdbc-475.jar
      #- ./docker/jars/openlineage-flink-1.32.0.jar:/opt/flink/lib/openlineage-flink-1.32.0.jar
      - ./docker/jars/openlineage-flink-1.33.0-SNAPSHOT.jar:/opt/flink/lib/openlineage-flink-1.33.0-SNAPSHOT.jar
      - ./docker/openlineage.yml:/tmp/openlineage.yml
    depends_on:
      - api
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        execution.job-status-changed-listeners: io.openlineage.flink.listener.OpenLineageJobStatusChangedListenerFactory
        openlineage.transport.type: http
        openlineage.transport.url: http://marquez-api:9000
        openlineage.trackingIntervalInSeconds: 3600
        # namespace resolver to match namespaces generatad by trino connector
        # TODO: fix openlineage java pattern resolver
        # openlineage.dataset.namespaceResolvers.trino.type: pattern
        # openlineage.dataset.namespaceResolvers.trino.regex: (trino\:\/\/)[a-z]+\:\d+
        openlineage.dataset.namespaceResolvers.trino.type: hostList
        openlineage.dataset.namespaceResolvers.trino.hosts: [trino://trino]
      #- OPENLINEAGE_CONFIG=/tmp/openlineage.yml
    command: jobmanager
