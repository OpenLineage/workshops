version: "3.7"
x-airflow-common:
  &airflow-common
  image: apache/airflow:2.8.2
  environment:
    &airflow-common-env
    OPENLINEAGE_URL: http://api:5000
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@db/airflow
    # For backward compatibility, with Airflow <2.3
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@db/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@db/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW_CONN_POSTGRES_CONN: postgresql://data:data@db:5432/data
    _PIP_ADDITIONAL_REQUIREMENTS: openlineage-airflow
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    db:
      condition: service_healthy

services:
  web:
    image: "marquezproject/marquez-web:latest"
    container_name: marquez-web
    environment:
      - MARQUEZ_HOST=api
      - MARQUEZ_PORT=5000
    ports:
      - 3000:3000
    links:
      - "api:marquez"
    depends_on:
      - api

  api:
    image: marquezproject/marquez:latest
    container_name: marquez-api
    ports:
      - "5000:5000"
      - "5001:5001"
    volumes:
      - ./docker/wait-for-it.sh:/usr/src/app/wait-for-it.sh
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000/api/v1/namespaces" ]
      interval: 200s
      timeout: 200s
      retries: 5
    links:
      - "db:postgres"
    depends_on:
      - db
    entrypoint: [ "./wait-for-it.sh", "db:5432", "--", "./entrypoint.sh" ]

  db:
    image: postgres:13
    container_name: marquez-db
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      MARQUEZ_DB: marquez
      MARQUEZ_USER: marquez
      MARQUEZ_PASSWORD: marquez
      AIRFLOW_DB: airflow
      AIRFLOW_USER: airflow
      AIRFLOW_PASSWORD: airflow
      DATA_DB: data
      DATA_USER: data
      DATA_PASSWORD: data
    volumes:
      - ./docker/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh

  redis:
    image: redis:latest
    container_name: redis
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    container_name: airflow-webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    container_name: airflow-worker
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.1
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
  kafka:
    image: wurstmeister/kafka:2.13-2.8.1
    container_name: kafka
    hostname: kafka
    ports:
      - 9092:19092
    depends_on:
      - zookeeper
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT'
      KAFKA_LISTENERS: 'LISTENER_DOCKER_INTERNAL://kafka:9092,LISTENER_DOCKER_EXTERNAL://127.0.0.1:19092'
      KAFKA_ADVERTISED_LISTENERS: 'LISTENER_DOCKER_INTERNAL://kafka:9092,LISTENER_DOCKER_EXTERNAL://127.0.0.1:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'LISTENER_DOCKER_INTERNAL'
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_BROKER_ID: 1
      KAFKA_CREATE_TOPICS: 'io.openlineage.flink.kafka.input1:1:1,io.openlineage.flink.kafka.input2:1:1,io.openlineage.flink.kafka.output1:1:1'
      KAFKA_LOG4J_LOGGERS: 'kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO'
  registry:
    image: confluentinc/cp-schema-registry:7.6.0
    container_name: "schema-registry"
    hostname: schema-registry
    depends_on:
      - kafka
    ports:
      - "28081:28081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:9092'
      SCHEMA_REGISTRY_HOST_NAME: 'schema-registry'
      SCHEMA_REGISTRY_LISTENERS: 'http://schema-registry:8081,http://0.0.0.0:28081'
  generate-events:
    image: confluentinc/cp-schema-registry:7.6.0
    container_name: "generate-events"
    volumes:
      - ./docker/wait-for-it.sh:/tmp/wait-for-it.sh
      - ./docker/InputEvent.avsc:/tmp/InputEvent.avsc
      - ./docker/generate_events.sh:/tmp/generate_events.sh
      - ./docker/events.json:/tmp/events.json
    command: ['/tmp/wait-for-it.sh', 'schema-registry:28081', '--','/bin/bash', '/tmp/generate_events.sh']
    depends_on:
      - registry
  flink-taskmanager1:
    image: flink:1.18-java11
    container_name: taskmanager1
    volumes:
      - ./docker/wait-for-it.sh:/opt/flink/wait-for-it.sh
      - ./flink-app/build/libs/flink-app-all.jar:/opt/flink/lib/flink-app-all.jar
    hostname: taskmanager1
    command: taskmanager
    links:
      - "db:postgres"
    depends_on:
      - flink-jobmanager1
    entrypoint: [ './wait-for-it.sh', 'marquez-api:5000', '--', '/opt/flink/bin/taskmanager.sh', 'start-foreground', '-Djobmanager.rpc.address=jobmanager1', '-Dtaskmanager.numberOfTaskSlots=2' ]
  flink-jobmanager1:
    image: flink:1.18-java11
    hostname: jobmanager1
    links:
      - "db:postgres"
      - registry
    volumes:
      - ./docker/wait-for-it.sh:/opt/flink/wait-for-it.sh
      - ./flink-app/build/libs/flink-app-all.jar:/opt/flink/lib/flink-app-all.jar
      - ./docker/openlineage.yml:/tmp/openlineage.yml
    ports:
      - 8081:8081
    environment:
      OPENLINEAGE_CONFIG: '/tmp/openlineage.yml'
    depends_on:
      - generate-events
      - api
    entrypoint: [ './wait-for-it.sh', 'marquez-api:5000', '--', '/opt/flink/bin/standalone-job.sh', 'start-foreground', '--job-classname', 'io.openlineage.flink.FromTopicToPostgresApplication', '-Djobmanager.rpc.address=jobmanager1', '-Dexecution.attached=true' ]
  flink-taskmanager2:
    image: flink:1.18-java11
    container_name: taskmanager2
    volumes:
      - ./docker/wait-for-it.sh:/opt/flink/wait-for-it.sh
      - ./flink-app/build/libs/flink-app-all.jar:/opt/flink/lib/flink-app-all.jar
    hostname: taskmanager2
    command: taskmanager
    links:
      - "db:postgres"
    depends_on:
      - flink-jobmanager1
    entrypoint: [ './wait-for-it.sh', 'marquez-api:5000', '--', '/opt/flink/bin/taskmanager.sh', 'start-foreground', '-Djobmanager.rpc.address=jobmanager2', '-Dtaskmanager.numberOfTaskSlots=2' ]
  flink-jobmanager2:
    image: flink:1.18-java11
    hostname: jobmanager2
    links:
      - "db:postgres"
      - registry
    volumes:
      - ./docker/wait-for-it.sh:/opt/flink/wait-for-it.sh
      - ./flink-app/build/libs/flink-app-all.jar:/opt/flink/lib/flink-app-all.jar
      - ./docker/openlineage.yml:/tmp/openlineage.yml
    ports:
      - 8082:8081
    environment:
      OPENLINEAGE_CONFIG: '/tmp/openlineage.yml'
    depends_on:
      - generate-events
      - api
    entrypoint: [ './wait-for-it.sh', 'marquez-api:5000', '--', '/opt/flink/bin/standalone-job.sh', 'start-foreground', '--job-classname', 'io.openlineage.flink.FromPostgresToTopicApplication', '-Djobmanager.rpc.address=jobmanager2', '-Dexecution.attached=true' ]